use ring::rand;
use ring::signature::{self};
use simple_x509::{X509Builder, X509};
use std::fs::File;
use std::io::prelude::*;
use std::io::BufWriter;
use std::io::Read;

fn read_file(f: &str) -> std::io::Result<Vec<u8>> {
    let mut fd = File::open(f)?;
    let mut data = Vec::new();
    let _amt = fd.read_to_end(&mut data)?;

    Ok(data)
}

fn write_file(f: &str, data: &Vec<u8>) -> std::io::Result<()> {
    let mut buffer = BufWriter::new(File::create(f)?);
    buffer.write_all(data)?;
    buffer.flush()?;

    Ok(())
}

fn rsa_sign_fn(data: Vec<u8>) -> Option<Vec<u8>> {
    let der = read_file("tests/data/rsa.pkcs8").ok()?;
    let key = signature::RsaKeyPair::from_pkcs8(&der).ok()?;
    let mut sig = vec![0; key.public_modulus_len()];

    let rng = rand::SystemRandom::new();

    key.sign(&signature::RSA_PKCS1_SHA256, &rng, &data, &mut sig)
        .ok()?;

    Some(sig)
}

fn ec_sign_fn(data: Vec<u8>) -> Option<Vec<u8>> {
    let der = read_file("tests/data/ec.pkcs8").ok()?;
    let key = signature::EcdsaKeyPair::from_pkcs8(&signature::ECDSA_P256_SHA256_ASN1_SIGNING, &der)
        .ok()?;
    let rng = rand::SystemRandom::new();
    let sig = key.sign(&rng, &data).ok()?;

    Some(sig.as_ref().to_vec())
}

#[test]
fn x509_rsa_root_test() {
    let pub_rsa_n: Vec<u8> = vec![
        0x00, 0xc4, 0x12, 0x74, 0x10, 0xe3, 0xd3, 0x37, 0x20, 0x3a, 0xe7, 0xfd, 0xf3, 0x3e, 0x1f,
        0x39, 0xd5, 0x3a, 0x02, 0xba, 0x9d, 0xf2, 0xcf, 0xec, 0xfe, 0x31, 0x79, 0x86, 0x09, 0x21,
        0xf9, 0xce, 0xe1, 0xee, 0x8e, 0xb0, 0x65, 0x1c, 0xe5, 0xf5, 0x5d, 0xdb, 0xc5, 0x9e, 0x40,
        0x06, 0xc4, 0x3b, 0xc9, 0x90, 0x45, 0xbd, 0xee, 0x70, 0xde, 0xb3, 0x36, 0x49, 0xee, 0xa9,
        0x72, 0xf0, 0xcb, 0x39, 0x6e, 0x43, 0xd9, 0xd0, 0xf1, 0x3c, 0xfd, 0x01, 0x4c, 0xb7, 0xef,
        0xcd, 0x1d, 0xb1, 0x59, 0x4d, 0xa5, 0xa0, 0x3e, 0x23, 0x5f, 0x4c, 0x7b, 0x6c, 0xd5, 0xbc,
        0xa3, 0xd3, 0x9b, 0x83, 0xa0, 0xb8, 0xe1, 0x57, 0x06, 0xd3, 0x2c, 0x08, 0xb0, 0x74, 0x1d,
        0xfb, 0x91, 0x63, 0xb2, 0x24, 0x60, 0xd0, 0x5a, 0x34, 0x11, 0xd4, 0x1a, 0x9d, 0xa7, 0x4e,
        0xd3, 0x99, 0x82, 0x14, 0x5d, 0x72, 0xef, 0xd1, 0x0e, 0x15, 0xcd, 0x21, 0xfc, 0x2b, 0x3d,
        0xb3, 0x1d, 0x67, 0xf0, 0x06, 0xcc, 0x48, 0x0e, 0xeb, 0xab, 0x9f, 0x0e, 0x5c, 0xd9, 0xd2,
        0x8d, 0xb2, 0x11, 0x8d, 0x63, 0x0d, 0x05, 0xdb, 0x6f, 0xb1, 0xa1, 0xa1, 0xf6, 0xe8, 0xb9,
        0x3d, 0x04, 0x9d, 0x34, 0xe1, 0x77, 0x44, 0xde, 0xc3, 0xb2, 0x89, 0x89, 0x39, 0x7e, 0x34,
        0xc2, 0xcb, 0xe7, 0xa0, 0x45, 0x4f, 0x60, 0x5a, 0x25, 0x13, 0x04, 0xf2, 0x93, 0x8b, 0xa8,
        0xba, 0x1e, 0x74, 0xb4, 0xcd, 0xe6, 0x5e, 0xdd, 0x84, 0x05, 0xb3, 0x7e, 0xb2, 0x67, 0xc2,
        0xce, 0x6d, 0x3e, 0x4d, 0xb9, 0xbc, 0x7d, 0x4f, 0x32, 0xc0, 0xe8, 0x82, 0x34, 0x61, 0x06,
        0x8d, 0xa6, 0x96, 0x2f, 0x52, 0xb9, 0xb5, 0x7c, 0x86, 0xf1, 0xd8, 0x8e, 0xd0, 0x3d, 0x66,
        0x16, 0x1c, 0x5a, 0xc1, 0xc5, 0x8e, 0x05, 0xe4, 0xfd, 0x47, 0xcc, 0xf6, 0x2a, 0xe3, 0x52,
        0x6b, 0x23,
    ];

    let country = "AU";
    let state = "Some-State";
    let organization = "Internet Widgits Pty Ltd";

    let x: X509 = X509Builder::new(0xf2f9d803d7b7d734)
        .issuer_prstr(vec![2, 5, 4, 6], country) /* countryName */
        .issuer_utf8(vec![2, 5, 4, 8], state) /* stateOrProvinceName */
        .issuer_utf8(vec![2, 5, 4, 10], organization) /* organizationName */
        .subject_prstr(vec![2, 5, 4, 6], country) /* countryName */
        .subject_utf8(vec![2, 5, 4, 8], state) /* stateOrProvinceName */
        .subject_utf8(vec![2, 5, 4, 10], organization) /* organizationName */
        .not_before(1_619_014_703)
        .not_after(1_650_550_703)
        .pub_key_rsa(
            vec![1, 2, 840, 113549, 1, 1, 11], /* sha256WithRSAEncryption (PKCS #1) */
            vec![1, 2, 840, 113549, 1, 1, 1],  /* rsaEncryption (PKCS #1) */
            pub_rsa_n,
            65537,
        )
        .build();

    let der = match x.to_der(|c| rsa_sign_fn(c)) {
        Some(d) => d,
        None => panic!("x5092der() failed"),
    };

    let err = write_file("tests/data/ca_rsa.der", &der).map_err(|e| e.kind());
    assert_eq!(err, Ok(()));
}

#[test]
fn x509_ec_root_test() {
    let pub_ec_key: Vec<u8> = vec![
        0x04, 0xFE, 0x0B, 0x0F, 0x80, 0x27, 0x39, 0xCC, 0x47, 0xD7, 0x86, 0xEE, 0x0D, 0xAE, 0xE5,
        0x67, 0x77, 0x14, 0xBC, 0xBE, 0xAF, 0x9E, 0x90, 0xA1, 0x8C, 0xF3, 0x5C, 0xC8, 0x57, 0x9F,
        0xFA, 0xB3, 0x9D, 0xEE, 0xD8, 0x55, 0x82, 0xCA, 0x3B, 0x68, 0x72, 0x14, 0xE5, 0xAE, 0x42,
        0xBE, 0x0D, 0xAD, 0x5B, 0xDA, 0xAC, 0xEB, 0x0A, 0x5D, 0xDA, 0x01, 0x5D, 0xF6, 0xD4, 0x73,
        0x2A, 0xFB, 0x9E, 0xAB, 0x10,
    ];

    let country = "AU";
    let state = "Some-State";
    let organization = "Internet Widgits Pty Ltd";

    let x: X509 = X509Builder::new(0xf2f9d803d7b7d734)
        .issuer_prstr(vec![ 2, 5, 4, 6 ], country) /* countryName */
        .issuer_utf8(vec![ 2, 5, 4, 8 ], state) /* stateOrProvinceName */
        .issuer_utf8(vec![ 2, 5, 4, 10 ], organization) /* organizationName */
        .subject_prstr(vec![ 2, 5, 4, 6 ], country) /* countryName */
        .subject_utf8(vec![ 2, 5, 4, 8 ], state) /* stateOrProvinceName */
        .subject_utf8(vec![ 2, 5, 4, 10 ], organization) /* organizationName */
        .not_before(1_619_014_703)
        .not_after(1_650_550_703)
        .pub_key_ec(
            vec![ 1, 2, 840, 10045, 4, 3, 2 ], /* ecdsaWithSHA256 (ANSI X9.62 ECDSA algorithm with SHA256) */
            vec![ 1, 2, 840, 10045, 2, 1 ], /* ecPublicKey (ANSI X9.62 public key type) */
            pub_ec_key,
            vec![ 1, 2, 840, 10045, 3, 1, 7 ], /* prime256v1 (ANSI X9.62 named elliptic curve) */
        )

        .build();

    let der = match x.to_der(|c| ec_sign_fn(c)) {
        Some(d) => d,
        None => panic!("x5092der() failed"),
    };

    let err = write_file("tests/data/ca_ec.der", &der).map_err(|e| e.kind());
    assert_eq!(err, Ok(()));
}
